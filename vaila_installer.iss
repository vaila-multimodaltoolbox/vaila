; Script generated by Inno Setup Script Wizard
; vaila Installer Script

#define MyAppName "vaila"
#define MyAppVersion "1.0"
#define MyAppPublisher "Prof. Dr. Paulo R. P. Santiago"
#define MyAppURL "https://github.com/vaila-multimodaltoolbox/vaila"

[Setup]
; NOTE: The AppId uniquely identifies this application.
; Do not use the same AppId in installers for other applications.
AppId={{DC7B1ECD-6AC7-4F0E-91AB-58F0E3C6DAA9}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DefaultGroupName={#MyAppName}
; Remove the following line to not require administrator privileges
PrivilegesRequired=admin
OutputDir=.
OutputBaseFilename=vaila_installer
SetupIconFile=docs\images\vaila_ico.ico
Compression=lzma
SolidCompression=yes
WizardStyle=modern
WizardImageFile=docs\images\wizard_image.bmp
WizardSmallImageFile=docs\images\wizard_small.bmp

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "install_vaila_win.ps1"; DestDir: "{app}"; Flags: ignoreversion
; Also include all other files needed for installation
Source: "*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

[Icons]
Name: "{autoprograms}\{#MyAppName}\{#MyAppName}"; Filename: "pwsh.exe"; Parameters: "-ExecutionPolicy Bypass -NoExit -Command ""& '{app}\run_vaila.ps1'"""; IconFilename: "{app}\docs\images\vaila_ico.ico"; WorkingDir: "{app}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "pwsh.exe"; Parameters: "-ExecutionPolicy Bypass -NoExit -Command ""& '{app}\run_vaila.ps1'"""; IconFilename: "{app}\docs\images\vaila_ico.ico"; WorkingDir: "{app}"

[Run]
; Execute the PowerShell installation script with administrator privileges
Filename: "powershell.exe"; Parameters: "-ExecutionPolicy Bypass -NoExit -File ""{app}\install_vaila_win.ps1"""; Flags: runascurrentuser shellexec postinstall; Description: "Run vaila installation"

[Code]
// This code is executed before installation begins
function InitializeSetup(): Boolean;
begin
  // Check if PowerShell is installed
  if not FileExists(ExpandConstant('{sys}\WindowsPowerShell\v1.0\powershell.exe')) then
  begin
    MsgBox('This installer requires PowerShell, which was not found on your system.' + #13#10 +
           'Please install PowerShell before continuing.', mbError, MB_OK);
    Result := False;
    exit;
  end;
  
  // Check if Anaconda/Conda is installed (basic check)
  if not DirExists(ExpandConstant('{userdocs}\..\Anaconda3')) and 
     not DirExists(ExpandConstant('{userdocs}\..\miniconda3')) then
  begin
    if MsgBox('Anaconda/Miniconda was not detected in the default location.' + #13#10 +
             'vaila requires Anaconda or Miniconda to function properly.' + #13#10 + #13#10 +
             'Do you want to continue anyway?', mbConfirmation, MB_YESNO) = IDNO then
    begin
      Result := False;
      exit;
    end;
  end;
  
  Result := True;
end;

// When installation is finished, display a custom message
procedure CurStepChanged(CurStep: TSetupStep);
begin
  if CurStep = ssPostInstall then
  begin
    // Create a quick execution script for vaila
    SaveStringToFile(ExpandConstant('{app}\run_vaila.ps1'), 
      '# Script to run vaila' + #13#10 +
      '# Automatically created by the installer' + #13#10 + #13#10 +
      '$condaPath = (& conda info --base).Trim()' + #13#10 +
      '& "$condaPath\shell\condabin\conda-hook.ps1"' + #13#10 +
      'conda activate vaila' + #13#10 +
      'cd "' + ExpandConstant('{app}') + '"' + #13#10 +
      'python vaila.py' + #13#10,
      False);
  end;
end;
